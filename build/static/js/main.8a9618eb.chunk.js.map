{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["model_options","meta_options","ListBar","props","maxval","Math","max","weights","map","val","className","class","style","width","title","titleleft","titleright","items","i","numcol","round","clickid","clickids","clickfun","clickclass","key","onClick","InterviewTopicBox","window","open","doc","id","pdf","this","location","interviewee","writer","React","Component","TopicContainer","handleSelectMetaChange","selectedMetaOption","setState","handleSelectChange","selectedOption","fetch","value","then","res","json","td","topicstate","state","interviewmedia","topic","topicdoc","select_box","options","isSearchable","placeholder","onChange","topicpart","all","proportion","weights_name","proportion_women","console","log","proportion_black","proportion_women_writer","proportion_black_writer","description","handleChangeTopic","bind","topics","top_word","word_wgt","top_docs","doc_perc","handleChangeTopicDoc","top_docs_ids","docs","top_topics","topic_weights","top_topics_ids","interview","handleMediaButton","left","color","fontSize","cursor","marginLeft","handleChangeTopicstate","Viewer","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8a9618eb.chunk.js","sourcesContent":["import React from 'react';\nimport Select from 'react-select';\nimport './reset.css';\nimport './App.css';\n\n// ***************************************************************************\n// Helper function(s)\n\nvar model_options = [\n  {\"label\": \"Topic Model\", \"value\": \"topic\"},\n  {\"label\": \"Topic Model (no dialect)\", \"value\": \"topic_nodialect\"},\n  {\"label\": \"Document Clustering\", \"value\": \"cluster\"},\n  {\"label\": \"Document Clustering (no dialect)\", \"value\": \"cluster_nodialect\"},\n]\n\nvar meta_options = [\n  {\"label\": \"Proportion\", \"value\": \"proportion\"},\n  {\"label\": \"Gender\", \"value\": \"gender\"},\n  {\"label\": \"Race\", \"value\": \"race\"},\n  {\"label\": \"Gender (writer)\", \"value\": \"gender_writer\"},\n  {\"label\": \"Race (writer)\", \"value\": \"race_writer\"},\n]\n\nfunction ListBar(props) {\n  var maxval = Math.max(...props.weights);\n  var weights = props.weights.map(val => {\n    return(100 * val / maxval)\n  })\n\n  return(\n    <div\n      className={\"topic-list-container\" + props.class}\n      style={{width: props.width}}>\n      <div className=\"topic-list-title\">\n        <span>{props.title}</span>\n      </div>\n      <div className=\"topic-list-row topic-list-row-head\">\n        <span>{props.titleleft}</span>\n        <span>{props.titleright}</span>\n      </div>\n      {props.items.map( (val, i) => {\n        var numcol = null;\n\n        if (props.numcol) {\n          numcol = (\n            <div className=\"topic-list-percent\">\n              <span>{Math.round(props.weights[i]) + \"%\"}</span>\n            </div>\n          )\n        }\n\n        var clickid = i;\n        if (props.clickids) {\n          clickid = props.clickids[i];\n        }\n\n        var clickfun = props.clickfun;\n        var clickclass = \"topic-list-row\";\n        if (!clickfun) {\n          clickfun = function() {};\n          clickclass = \"topic-list-row noclick\"\n        }\n\n        return(\n          <div\n            className={clickclass}\n            key={i}\n            onClick={() => clickfun(clickid)}\n            >\n            <div\n              className=\"topic-list-text\">\n              <span>{val}</span>\n            </div>\n            {numcol}\n            <div className=\"topic-list-size\">\n            <div\n              className=\"topic-list-inner\"\n              style={{width: weights[i] + \"%\"}}>\n            </div>\n            </div>\n          </div>\n        )\n      })}\n\n    </div>\n  )\n}\n\nclass InterviewTopicBox extends React.Component {\n\n  render() {\n\n    return(\n      <div className=\"topic-meta\">\n        <div className=\"interview-btn-grp\">\n          <button\n            onClick={() => {\n              window.open(\"./data/text/\" + this.props.doc.id + \".txt\");\n            }}>\n            text\n          </button>\n          <button\n            onClick={() => {\n              window.open(this.props.doc.pdf);\n            }}>\n            pdf\n          </button>\n        </div>\n        <ul>\n        <li>\n          Title: <span>{this.props.doc.title}</span>\n        </li>\n        <li>\n          Location: <span>{this.props.doc.location}</span>\n        </li>\n        <li>\n          Interviewee: <span>{this.props.doc.interviewee}</span>\n        </li>\n        <li>\n          Writer: <span>{this.props.doc.writer}</span>\n        </li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nclass TopicContainer extends React.Component {\n\n  // Override two standard methods of React.Component //\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      td: null,\n      interviewmedia: 'meta',\n      topicstate: 'grid',\n      selectedOption: null,\n      selectedMetaOption: {\"label\": \"Proportion\", \"value\": \"proportion\"},\n      topic: 0,\n      topicdoc: 0\n    }\n  }\n\n  componentDidMount() {\n  }\n\n  handleChangeTopic(topic) {\n    this.setState({\n      topic: topic,\n      topicstate: 'topic',\n    });\n  }\n\n  handleChangeTopicDoc(topicdoc) {\n    this.setState({\n      topicdoc: topicdoc,\n      topicstate: 'doc',\n    });\n  }\n\n  handleChangeTopicstate(value) {\n    this.setState({\n      topicstate: value,\n    });\n  }\n\n  handleMediaButton(value) {\n    this.setState({\n      interviewmedia: value,\n    });\n  }\n\n  handleSelectMetaChange = (selectedMetaOption) => {\n    this.setState({ selectedMetaOption });\n  }\n\n\n  handleSelectChange = (selectedOption) => {\n    this.setState({ selectedOption });\n    fetch(\"./data/\" + selectedOption.value + \".json\").then(res => {\n      return res.json()\n    }).then(res => {\n      this.setState({\n        td: res,\n        topicstate: 'grid'\n      });\n    });\n  }\n\n  render() {\n\n    var select_box = (<div className=\"select-group\">\n              <Select\n                options={ model_options }\n                className=\"myselect\"\n                isSearchable={false}\n                placeholder=\"Select a Model\"\n                onChange={ this.handleSelectChange }\n                value={ this.state.selectedOption }\n                />\n              <Select\n                options={ meta_options }\n                className=\"myselect\"\n                isSearchable={false}\n                placeholder=\"\"\n                onChange={ this.handleSelectMetaChange }\n                value={ this.state.selectedMetaOption }\n                />\n            </div>);\n\n    if (!this.state.td) {\n      return <div className={\"topic-container \"}>\n        <div className=\"topic-header\">\n          <span>Select a Topic or Document Clustering Model</span>\n        </div>\n        {select_box}\n      </div>\n    }\n\n    var topicpart = null;\n\n    if (this.state.topicstate === \"grid\") {\n      var weights = this.state.td.all.map(val => {return(val.proportion)});\n      var weights_name = \"proportion of corpus\";\n\n      if (this.state.selectedMetaOption.value === \"gender\")\n      {\n        weights = this.state.td.all.map(val => {return(val.proportion_women)});\n        console.log(this.state.td.all[0])\n        weights_name = \"proportion female interviewees\";\n      }\n      if (this.state.selectedMetaOption.value === \"race\")\n      {\n        weights = this.state.td.all.map(val => {return(val.proportion_black)});\n        console.log(this.state.td.all[0])\n        weights_name = \"proportion black interviewees\";\n      }\n      if (this.state.selectedMetaOption.value === \"gender_writer\")\n      {\n        weights = this.state.td.all.map(val => {return(val.proportion_women_writer)});\n        console.log(this.state.td.all[0])\n        weights_name = \"proportion female writers\";\n      }\n      if (this.state.selectedMetaOption.value === \"race_writer\")\n      {\n        weights = this.state.td.all.map(val => {return(val.proportion_black_writer)});\n        console.log(this.state.td.all[0])\n        weights_name = \"proportion black writers\";\n      }\n\n      topicpart = (\n        <div className=\"topic-part\">\n          <ListBar\n            titleleft=\"topic\"\n            titleright={weights_name}\n            items={this.state.td.all.map(val => {return(val.description)})}\n            weights={weights}\n            width=\"600px\"\n            clickfun={this.handleChangeTopic.bind(this)}\n            numcol={true}\n            class=\"\"\n          />\n        </div>\n      );\n    }\n\n    if (this.state.topicstate === \"topic\") {\n      topicpart = (\n        <div className=\"topic-part\">\n          <div style={{width: '900px'}}>\n          <ListBar\n            title=\"Associated Words\"\n            titleleft=\"word\"\n            titleright=\"weight\"\n            items={this.state.td.topics[this.state.topic].top_word}\n            weights={this.state.td.topics[this.state.topic].word_wgt}\n            width=\"250px\"\n            numcol={false}\n            class=\"\"\n          />\n          <ListBar\n            title=\"Associated Interviews\"\n            titleleft=\"interview\"\n            titleright=\"proportion in topic\"\n            items={this.state.td.topics[this.state.topic].top_docs}\n            weights={this.state.td.topics[this.state.topic].doc_perc}\n            width=\"400px\"\n            clickfun={this.handleChangeTopicDoc.bind(this)}\n            clickids={this.state.td.topics[this.state.topic].top_docs_ids}\n            numcol={true}\n            class=\" topic-list-two\"\n          />\n          </div>\n        </div>\n      );\n    }\n    if (this.state.topicstate === \"doc\") {\n      topicpart = (\n        <div>\n          <div className=\"topic-part\">\n            <ListBar\n              titleleft=\"Topic\"\n              titleright=\"proportion of document\"\n              items={this.state.td.docs[this.state.topicdoc].top_topics}\n              weights={this.state.td.docs[this.state.topicdoc].topic_weights}\n              clickfun={this.handleChangeTopic.bind(this)}\n              clickids={this.state.td.docs[this.state.topicdoc].top_topics_ids}\n              width=\"300px\"\n              numcol={true}\n              class=\"\"\n            />\n          </div>\n          <InterviewTopicBox\n            interview={this.state.interview}\n            doc={this.state.td.docs[this.state.topicdoc]}\n            interviewmedia={this.state.interviewmedia}\n            handleMediaButton={this.handleMediaButton.bind(this)}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <div className={\"topic-container \"}>\n        <div className=\"topic-header\">\n          <span>Select a Topic or Document Clustering Model</span>\n        </div>\n        {select_box}\n        <span\n          style={{left: \"500px\", color: \"#268bd2\", fontSize: \"1.2em\", cursor: \"pointer\", marginLeft: \"400px\"}}\n          onClick={() => this.handleChangeTopicstate(\"grid\")}>\n          [all topics]\n        </span>\n        {topicpart}\n      </div>\n    )\n  }\n}\n\n\n// ***************************************************************************\n// Main class that holds the state of the App\n\nclass Viewer extends React.Component {\n\n  render() {\n\n    return (\n      <TopicContainer/>\n    );\n  }\n}\n\n// ***************************************************************************\n// Wrap the App and return the rendered Viewer\n\nfunction App() {\n  return (\n    <Viewer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}